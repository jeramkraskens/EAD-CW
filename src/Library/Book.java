/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Library;

import Connection.DatabaseConnection;
import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jeram Kraskens
 */
public class Book extends javax.swing.JFrame {

     PreparedStatement stmt;

    /**
     * Creates new form Book
     */
    public Book() {
        initComponents();
        loadPublisher();
        loadBookData();
    }
    
    ResultSet rs;
     Connection con;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtBname = new javax.swing.JTextField();
        btnAddCat = new javax.swing.JButton();
        btnUpdateCat = new javax.swing.JButton();
        btnDeleteCat = new javax.swing.JButton();
        btnCancelCat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPageNum = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtBid = new javax.swing.JTextField();
        txtCategory = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        txtPublisher = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Book Name");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Category");

        txtBname.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        txtBname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBnameActionPerformed(evt);
            }
        });

        btnAddCat.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnAddCat.setForeground(new java.awt.Color(0, 0, 255));
        btnAddCat.setText("Add");
        btnAddCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCatActionPerformed(evt);
            }
        });

        btnUpdateCat.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnUpdateCat.setText("Update");
        btnUpdateCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCatActionPerformed(evt);
            }
        });

        btnDeleteCat.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnDeleteCat.setForeground(new java.awt.Color(255, 0, 0));
        btnDeleteCat.setText("Delete");
        btnDeleteCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCatActionPerformed(evt);
            }
        });

        btnCancelCat.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnCancelCat.setText("Cancel");
        btnCancelCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelCatActionPerformed(evt);
            }
        });

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Book Name", "Category", "Author", "No. Of Books", "Publisher"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bookTable);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Publisher");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Author");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Number Of. Books");

        txtPageNum.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        txtPageNum.setForeground(new java.awt.Color(0, 0, 0));

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Book Id");

        txtBid.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N

        txtCategory.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        txtCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Children's", "Romance", "Novel", "Horror", "Fantasy", "Mystery", "Educational" }));

        jPanel2.setBackground(new java.awt.Color(0, 0, 204));

        jLabel6.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Book");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(543, 543, 543)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel6)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        txtAuthor.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N

        txtPublisher.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2))
                                .addGap(63, 63, 63)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBid, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBname, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPageNum, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                    .addComponent(txtAuthor)
                                    .addComponent(txtPublisher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddCat, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteCat, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdateCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancelCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(15, 15, 15)))
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtBid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtPageNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddCat)
                            .addComponent(btnUpdateCat))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteCat)
                            .addComponent(btnCancelCat)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  private void loadBookData() {
    DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
    model.setRowCount(0); // clear existing data

    try {
        
        Connection con = DatabaseConnection.getConnection();
        String sql = "SELECT * FROM newbook";
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(sql);

        while (rs.next()) {
            String id = rs.getString("id");
            String bname = rs.getString("bname");
            String cname = rs.getString("cname");
            String pub = rs.getString("pub");
            String author = rs.getString("author");
            String pages = rs.getString("pages");
           
            

            model.addRow(new Object[]{id, bname,cname,pub,author,pages});
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error Book Data: " + e.getMessage());
    }
}
   /* DefaultTableModel dtb;
    public void loadBookData() {
        con = DatabaseConnection.getConnection();
        int c;
        try {
            String sql = "select * from book";
            stmt = con.prepareStatement(sql);
            rs = stmt.executeQuery();

            ResultSetMetaData rmd = rs.getMetaData();
            c = rmd.getColumnCount();

            dtb = (DefaultTableModel) bookTable.getModel();
            dtb.setRowCount(0);

            while (rs.next()) {

                Vector v2 = new Vector();

                for (int i = 1; i < c; i++) {
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("Bookname"));
                    v2.add(rs.getString("categoryName"));
                    v2.add(rs.getString("publisher"));
                    v2.add(rs.getString("author"));
                    v2.add(rs.getString("noOfpages"));
                }

                dtb.addRow(v2);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error1: "+e.getMessage());
        }

    }
  */

  
public void loadPublisher() {
    try (Connection con = DatabaseConnection.getConnection();
         PreparedStatement stmt = con.prepareStatement("SELECT DISTINCT Name FROM publisher");
         ResultSet rs = stmt.executeQuery()) {

        txtPublisher.removeAllItems();
        while (rs.next()) {
            txtPublisher.addItem(rs.getString("Name"));
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Database Error: " + e.getMessage());
    }
}

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    private void btnDeleteCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCatActionPerformed
    Connection conn = DatabaseConnection.getConnection();
                           
                         try{
            String sql = "DELETE  FROM newbook WHERE id = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, txtBid.getText().trim());
         
            
            int result = stmt.executeUpdate();
            if(result > 0)
            {
            
                JOptionPane.showMessageDialog(rootPane, ""+"Deleted");
            
            }else
            {
            
            JOptionPane.showMessageDialog(rootPane, ""+"No Delete");
            
            }
        
        }
        catch(Exception ee){
   
         JOptionPane.showMessageDialog(rootPane, ""+ "ex");
        } 
                         
                         loadBookData();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteCatActionPerformed

    private void btnUpdateCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCatActionPerformed

        Connection conn = DatabaseConnection.getConnection();

                           
                         try{
            String sql = "UPDATE newbook SET bname = ?,  cname = ?, pub = ?, author = ?, pages = ?  WHERE id = ?";
            stmt = conn.prepareStatement(sql);
             stmt.setString(6, txtBid.getText().trim());
                stmt.setString(1, txtBname.getText().trim());
                stmt.setString(2, txtCategory.getSelectedItem().toString());
                stmt.setString(3, txtAuthor.getText().trim());
                stmt.setString(4, txtPageNum.getText().trim());
                stmt.setString(5, txtPublisher.getSelectedItem().toString());

          
            
            int result = stmt.executeUpdate();
            if(result > 0)
            {
            
                JOptionPane.showMessageDialog(rootPane, ""+"Updated");
            
            }else
            {
            
            JOptionPane.showMessageDialog(rootPane, ""+"Update Fail");
            
            }
        
        }
        catch(Exception ee){
   
         JOptionPane.showMessageDialog(rootPane, ""+ "Try Again");
        }      
                         loadBookData();// TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateCatActionPerformed

     public boolean validateForm(){
    
        boolean status =  false;
        
      if(txtBid.getText().equals("")||txtBname.getText().equals("")||txtPageNum.getText().equals("")){
      
      status =  true;
     
      }
      
      return status;
}
    
    
    
    
    private void btnAddCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCatActionPerformed

            if (validateForm()) {

            JOptionPane.showMessageDialog(rootPane, "Please Fill All Fields");

        } else {

           Connection conn = DatabaseConnection.getConnection();

            try {

                String sql = "INSERT INTO newbook VALUES (?,?,?,?,?,?)";

                stmt = conn.prepareStatement(sql);

                stmt.setString(1, txtBid.getText().trim());
                stmt.setString(2, txtBname.getText().trim());
                stmt.setString(3, txtCategory.getSelectedItem().toString());
                stmt.setString(4, txtAuthor.getText().trim());
                stmt.setString(5, txtPageNum.getText().trim());
                stmt.setString(6, txtPublisher.getSelectedItem().toString());
            

                int result = stmt.executeUpdate();
                if (result > 0) {

                    JOptionPane.showMessageDialog(rootPane, "" + "Book Added Successfully");

                } else {

                    JOptionPane.showMessageDialog(rootPane, "" + "Fail Added");

                }
            } catch (Exception ee) {

                JOptionPane.showMessageDialog(rootPane, "" + "Try Again");
            }
      loadBookData();
        }
       
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddCatActionPerformed

   
    private void txtBnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBnameActionPerformed

    private void btnCancelCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelCatActionPerformed

        this.setVisible(false);
        Main m = new Main();
        m.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_btnCancelCatActionPerformed


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Book().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookTable;
    private javax.swing.JButton btnAddCat;
    private javax.swing.JButton btnCancelCat;
    private javax.swing.JButton btnDeleteCat;
    private javax.swing.JButton btnUpdateCat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBid;
    private javax.swing.JTextField txtBname;
    private javax.swing.JComboBox<String> txtCategory;
    private javax.swing.JTextField txtPageNum;
    private javax.swing.JComboBox<String> txtPublisher;
    // End of variables declaration//GEN-END:variables

    private static class PublisherDAO {

        private static List<String> getAllPublisherNames() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        public PublisherDAO() {
        }
    }
}
